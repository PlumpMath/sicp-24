; Ackermann's funciton

(define (A x y)
    (cond   ((= y 0) 0)
            ((= x 0) (* 2 y))
            ((= y 1) 2)
            (else (A (- x 1)
                    (A x (- y 1))))))
       

Given this definition, the following procedures evaluate as described below.

(define (f n) (A 0 n))
--
f
--
(A 0 n)
(* 2 n)
--
2n
--


(define (g n) (A 1 n))
--
g
--
(A 1 n)
(A (- 1 1) (A 1 (- n 1)))
(A 0 (A 1 (- n 1)))
(* 2 (A 1 (- n 1)))
(* 2 (A 0 (A 1 (- (- n 1) 1))))
(* 2 (* 2 (A 1 (- n 2))))
(* 2 (* 2 (A 0 (A 1 (- (- n 2) 1)))))
(* 2 (* 2 (* 2 (A 1 (- n 3)))))
...
(* 2 (* 2 (* 2 ..(- n 1) times.. (A 1 1))))
--
2^n
--


(define (h n) (A 2 n))
--
h
--
(A 2 n)
(A (- 2 1) (A 2 (- n 1)))
(A 1 (A 2 (- n 1)))
2 ^ (A 2 (- n 1))
...
2^2^2^2^ ...(- n 1) times... (A 2 1)
--
2^2^2... n times




