; Ex. 1.35 Modify fixed-point to print the sequence of approximations

(define tolerance 0.00001)


(define (fixed-point f first-guess)
    (define (close-enough? v1 v2)
        (< (abs (- v1 v2)) tolerance))
    (define (try guess)
        (let ((next (f guess)))
          (display "Guess: ")
          (display guess)
          (newline)
          (display "Next: ")
          (display next)
          (newline)
          (if (close-enough? guess next)
              next
              (try next))))
    (try first-guess))
        
        
(define (x-exp-x x)
  (fixed-point (lambda (x) (/ (log 1000) (log x)))
	       1.1))
           
(define (x-exp-x-avg-damped x)
  (fixed-point (lambda (y) (average y (/ (log 1000) (log x))))
  1.1))

  
; Sample output for the x-to-x procedure:

; OUTPUT BEGINS
; Guess: 1.1
; Next: 72.47657378429035
; Guess: 72.47657378429035
; Next: 1.6127318474109593
; Guess: 1.6127318474109593
; Next: 14.45350138636525
; Guess: 14.45350138636525
; Next: 2.5862669415385087
; Guess: 2.5862669415385087
; Next: 7.269672273367045
; Guess: 7.269672273367045
; Next: 3.4822383620848467
; Guess: 3.4822383620848467
; Next: 5.536500810236703
; Guess: 5.536500810236703
; Next: 4.036406406288111
; Guess: 4.036406406288111
; Next: 4.95053682041456
; Guess: 4.95053682041456
; Next: 4.318707390180805
; Guess: 4.318707390180805
; Next: 4.721778787145103
; Guess: 4.721778787145103
; Next: 4.450341068884912
; Guess: 4.450341068884912
; Next: 4.626821434106115
; Guess: 4.626821434106115
; Next: 4.509360945293209
; Guess: 4.509360945293209
; Next: 4.586349500915509
; Guess: 4.586349500915509
; Next: 4.535372639594589
; Guess: 4.535372639594589
; Next: 4.568901484845316
; Guess: 4.568901484845316
; Next: 4.546751100777536
; Guess: 4.546751100777536
; Next: 4.561341971741742
; Guess: 4.561341971741742
; Next: 4.551712230641226
; Guess: 4.551712230641226
; Next: 4.558059671677587
; Guess: 4.558059671677587
; Next: 4.55387226495538
; Guess: 4.55387226495538
; Next: 4.556633177654167
; Guess: 4.556633177654167
; Next: 4.554812144696459
; Guess: 4.554812144696459
; Next: 4.556012967736543
; Guess: 4.556012967736543
; Next: 4.555220997683307
; Guess: 4.555220997683307
; Next: 4.555743265552239
; Guess: 4.555743265552239
; Next: 4.555398830243649
; Guess: 4.555398830243649
; Next: 4.555625974816275
; Guess: 4.555625974816275
; Next: 4.555476175432173
; Guess: 4.555476175432173
; Next: 4.555574964557791
; Guess: 4.555574964557791
; Next: 4.555509814636753
; Guess: 4.555509814636753
; Next: 4.555552779647764
; Guess: 4.555552779647764
; Next: 4.555524444961165
; Guess: 4.555524444961165
; Next: 4.555543131130589
; Guess: 4.555543131130589
; Next: 4.555530807938518
; Guess: 4.555530807938518
; Next: 4.555538934848503
; ;Value: 4.555538934848503
; OUTPUT ENDS

  
; Sample output for the x-to-x-avg-damped procedure:

; OUTPUT BEGINS
; Guess: 1.1
; Next: .9523809523809523
; Guess: .9523809523809523
; Next: 1.024390243902439
; Guess: 1.024390243902439
; Next: .9879518072289156
; Guess: .9879518072289156
; Next: 1.006060606060606
; Guess: 1.006060606060606
; Next: .9969788519637464
; Guess: .9969788519637464
; Next: 1.0015128593040847
; Guess: 1.0015128593040847
; Next: .999244142101285
; Guess: .999244142101285
; Next: 1.0003780718336484
; Guess: 1.0003780718336484
; Next: .9998109998109999
; Guess: .9998109998109999
; Next: 1.000094509025612
; Guess: 1.000094509025612
; Next: .9999527477200776
; Guess: .9999527477200776
; Next: 1.0000236266981688
; Guess: 1.0000236266981688
; Next: .9999881867904693
; Guess: .9999881867904693
; Next: 1.0000059066396534
; Guess: 1.0000059066396534
; Next: .9999970466888953
; ;Value: .9999970466888953
; OUTPUT ENDS


